name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-rc*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
      # Caching disabled due to runner tar extraction conflicts
      - name: Prepare release dir
        run: mkdir -p release
      - name: Build Linux amd64
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o release/khatru-relay-linux-amd64 ./cmd/khatru-relay
      - name: Build Linux arm64
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o release/khatru-relay-linux-arm64 ./cmd/khatru-relay
      - name: Build macOS amd64
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o release/khatru-relay-darwin-amd64 ./cmd/khatru-relay
      - name: Build macOS arm64
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o release/khatru-relay-darwin-arm64 ./cmd/khatru-relay
      - name: Build Windows amd64
        run: |
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o release/khatru-relay-windows-amd64.exe ./cmd/khatru-relay
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: khatru-relay-${{ github.ref_name }}
          path: release/
      - name: Get or create GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          API="https://api.github.com/repos/${{ github.repository }}"
          # Ensure jq is available
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

          # Try to GET the release by tag
          resp_file=$(mktemp)
          http_code=$(curl -s -w "%{http_code}" -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" -o "$resp_file" "$API/releases/tags/$TAG" || true)

          if [ "$http_code" = "200" ]; then
            echo "Found existing release for $TAG â€” replacing it"
            release_id=$(jq -r .id "$resp_file")
            # Delete existing release (this removes the release but leaves the tag; we'll recreate the release object)
            del_resp=$(curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$API/releases/$release_id")
            # Create a fresh release object
            if [[ "$TAG" == *"-rc"* ]]; then
              prerelease=true
            else
              prerelease=false
            fi
            body=$(jq -n --arg tag "$TAG" --arg name "$TAG" --argjson prerelease $prerelease '{ tag_name: $tag, name: $name, draft: false, prerelease: $prerelease }')
            created=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" -d "$body" "$API/releases")
            upload_url=$(echo "$created" | jq -r .upload_url)
          elif [ "$http_code" = "404" ]; then
            echo "Release not found, creating release for $TAG"
            if [[ "$TAG" == *"-rc"* ]]; then
              prerelease=true
            else
              prerelease=false
            fi
            body=$(jq -n --arg tag "$TAG" --arg name "$TAG" --argjson prerelease $prerelease '{ tag_name: $tag, name: $name, draft: false, prerelease: $prerelease }')
            created=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" -d "$body" "$API/releases")
            upload_url=$(echo "$created" | jq -r .upload_url)
          else
            echo "Unexpected response ($http_code) from GitHub API while checking release:" >&2
            cat "$resp_file" >&2
            exit 1
          fi

          # Export upload_url for subsequent steps
          echo "upload_url=$upload_url" >> "$GITHUB_OUTPUT"
      - name: Archive release artifacts
        run: |
          zip -r release-${{ github.ref_name }}.zip release/
      - name: Upload release asset (zip) via curl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          # strip the template part {?name,label}
          UPLOAD_URL="${UPLOAD_URL%%\{*}"
          ASSET_FILE="release-${{ github.ref_name }}.zip"
          ASSET_NAME="khatru-relay-${{ github.ref_name }}.zip"
          echo "Uploading $ASSET_FILE to $UPLOAD_URL?name=$ASSET_NAME"
          http_status=$(curl -s -o /tmp/upload_resp -w "%{http_code}" \
            -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @"$ASSET_FILE" \
            "$UPLOAD_URL?name=$ASSET_NAME")
          if [ "$http_status" -ge 200 ] && [ "$http_status" -lt 300 ]; then
            echo "Upload succeeded (HTTP $http_status)"
            cat /tmp/upload_resp
          else
            echo "Upload failed with HTTP status $http_status" >&2
            cat /tmp/upload_resp >&2 || true
            exit 1
          fi
