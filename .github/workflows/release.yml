name: Create Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/saint-michaels-mirror

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.1'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build binaries for multiple architectures
      run: |
        mkdir -p dist
        
        # Build for Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/saint-michaels-mirror-linux-amd64 ./cmd/saint-michaels-mirror
        
        # Build for Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/saint-michaels-mirror-linux-arm64 ./cmd/saint-michaels-mirror
        
        # Build for macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/saint-michaels-mirror-darwin-amd64 ./cmd/saint-michaels-mirror
        
        # Build for macOS ARM64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/saint-michaels-mirror-darwin-arm64 ./cmd/saint-michaels-mirror
        
        # Build for Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/saint-michaels-mirror-windows-amd64.exe ./cmd/saint-michaels-mirror
        
        # Build for Windows ARM64
        GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o dist/saint-michaels-mirror-windows-arm64.exe ./cmd/saint-michaels-mirror

    - name: Generate checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" HEAD)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Espelho de SÃ£o Miguel ${{ github.ref_name }}
          
          A Nostr relay aggregator built on khatru that forwards events between multiple relays.
          
          ### Docker Images
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          
          ### Binary Downloads
          
          #### Complete Archives (Recommended)
          - **Linux/macOS**: `saint-michaels-mirror-${{ github.ref_name }}-complete.tar.gz`
          - **Windows**: `saint-michaels-mirror-${{ github.ref_name }}-complete.zip`
          
          These archives include binaries, static files, templates, and configuration examples.
          
          #### Individual Binaries
          Download individual binaries for your platform:
          - **Linux AMD64**: `saint-michaels-mirror-linux-amd64`
          - **Linux ARM64**: `saint-michaels-mirror-linux-arm64`
          - **macOS AMD64**: `saint-michaels-mirror-darwin-amd64`
          - **macOS ARM64 (Apple Silicon)**: `saint-michaels-mirror-darwin-arm64`
          - **Windows AMD64**: `saint-michaels-mirror-windows-amd64.exe`
          - **Windows ARM64**: `saint-michaels-mirror-windows-arm64.exe`
          
          ### Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Quick Start
          
          ### Option 1: Docker (Recommended)
          
          #### Basic Usage
          ```bash
          docker run -d \
            --name saint-michaels-mirror \
            -p 3337:3337 \
            -e RELAY_NAME="Your Relay Name" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          #### With Custom Configuration
          ```bash
          # Create a .env file with your configuration
          cat > .env << EOF
          RELAY_NAME=My Nostr Relay
          RELAY_DESCRIPTION=A Nostr relay aggregator
          RELAY_CONTACT=your-npub-here
          RELAY_SERVICE_URL=https://your-relay.com
          PUBLISH_REMOTES=wss://relay1.example.com,wss://relay2.example.com
          QUERY_REMOTES=wss://relay1.example.com,wss://relay2.example.com
          EOF
          
          # Run with custom configuration
          docker run -d \
            --name saint-michaels-mirror \
            -p 3337:3337 \
            --env-file .env \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          #### Using Docker Compose
          ```bash
          # Clone the repository and use the provided docker-compose.prod.yml
          git clone https://github.com/girino/saint-michaels-mirror.git
          cd saint-michaels-mirror
          cp example.env .env
          # Edit .env with your configuration
          docker compose -f docker-compose.prod.yml up -d
          ```
          
          ### Option 2: Standalone Binary
          
          #### Linux/macOS (Complete Archive - Recommended)
          ```bash
          # Download the complete archive with all assets
          wget https://github.com/girino/saint-michaels-mirror/releases/download/${{ github.ref_name }}/saint-michaels-mirror-${{ github.ref_name }}-complete.tar.gz
          tar -xzf saint-michaels-mirror-${{ github.ref_name }}-complete.tar.gz
          cd saint-michaels-mirror-${{ github.ref_name }}
          
          # Copy and configure environment
          cp .env.example .env
          # Edit .env with your settings
          
          # Run the appropriate binary
          chmod +x saint-michaels-mirror-linux-amd64  # or darwin-arm64 for macOS
          ./saint-michaels-mirror-linux-amd64 --addr=:3337
          ```
          
          #### Windows (Complete Archive - Recommended)
          ```cmd
          # Download the complete archive with all assets
          curl -LO https://github.com/girino/saint-michaels-mirror/releases/download/${{ github.ref_name }}/saint-michaels-mirror-${{ github.ref_name }}-complete.zip
          # Extract using your preferred zip tool
          
          # Copy and configure environment
          copy .env.example .env
          # Edit .env with your settings
          
          # Run the Windows binary
          saint-michaels-mirror-windows-amd64.exe --addr=:3337
          ```
          
          #### Individual Binary Downloads (Alternative)
          ```bash
          # Linux example - download individual binary
          wget https://github.com/girino/saint-michaels-mirror/releases/download/${{ github.ref_name }}/saint-michaels-mirror-linux-amd64
          chmod +x saint-michaels-mirror-linux-amd64
          
          # Set environment variables
          export RELAY_NAME="Your Relay Name"
          export PUBLISH_REMOTES="wss://relay1.example.com,wss://relay2.example.com"
          export QUERY_REMOTES="wss://relay1.example.com,wss://relay2.example.com"
          
          # Run the relay
          ./saint-michaels-mirror-linux-amd64 --addr=:3337
          ```
          
          ## Configuration
          
          ### Required Environment Variables
          - `RELAY_NAME` - Display name of your relay
          - `PUBLISH_REMOTES` - Comma-separated list of relays to forward published events to
          - `QUERY_REMOTES` - Comma-separated list of relays to query events from
          
          ### Optional Environment Variables
          - `RELAY_DESCRIPTION` - Description of your relay
          - `RELAY_CONTACT` - Contact information (npub, email, etc.)
          - `RELAY_SERVICE_URL` - Public URL of your relay
          - `RELAY_ICON` - Path to relay icon (for Docker)
          - `RELAY_BANNER` - Path to relay banner (for Docker)
          - `ADDR` - Address to listen on (default: :3337)
          - `VERBOSE` - Enable verbose logging (1 to enable)
          
          ## Verification
          
          After starting the relay, you can verify it's working:
          
          ```bash
          # Check NIP-11 relay information
          curl http://localhost:3337/.well-known/nostr.json
          
          # Check health status
          curl http://localhost:3337/api/v1/health
          
          # Check statistics
          curl http://localhost:3337/api/v1/stats
          ```
          
          ## Support
          
          - **Documentation**: [GitHub Repository](https://github.com/girino/saint-michaels-mirror)
          - **Issues**: [GitHub Issues](https://github.com/girino/saint-michaels-mirror/issues)
          - **License**: Girino's Anarchist License (GAL) - [License Details](https://license.girino.org/)
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

    - name: Create Binary Archives
      run: |
        cd dist
        
        # Create a complete release directory with binaries and assets
        mkdir -p saint-michaels-mirror-${{ github.ref_name }}
        
        # Copy binaries and checksums
        cp *.exe saint-michaels-mirror-${{ github.ref_name }}/ 2>/dev/null || true
        cp saint-michaels-mirror-* saint-michaels-mirror-${{ github.ref_name }}/ 2>/dev/null || true
        cp checksums.txt saint-michaels-mirror-${{ github.ref_name }}/ 2>/dev/null || true
        
        # Copy static and template folders
        cp -r ../cmd/saint-michaels-mirror/static saint-michaels-mirror-${{ github.ref_name }}/
        cp -r ../cmd/saint-michaels-mirror/templates saint-michaels-mirror-${{ github.ref_name }}/
        
        # Copy example.env as a template
        cp ../example.env saint-michaels-mirror-${{ github.ref_name }}/.env.example
        
        # Create README for the release
        cat > saint-michaels-mirror-${{ github.ref_name }}/README.md << 'EOF'
        # Espelho de SÃ£o Miguel ${{ github.ref_name }}
        
        This archive contains the Espelho de SÃ£o Miguel Nostr relay aggregator binaries and assets.
        
        ## Contents
        
        - **Binaries**: Platform-specific executable files
        - **static/**: Web interface assets (CSS, JavaScript, images)
        - **templates/**: HTML templates for the web interface
        - **.env.example**: Example configuration file
        - **checksums.txt**: SHA256 checksums for verification
        
        ## Quick Start
        
        1. Extract this archive
        2. Copy `.env.example` to `.env` and configure your settings
        3. Run the appropriate binary for your platform:
           - Linux: `./saint-michaels-mirror-linux-amd64`
           - macOS: `./saint-michaels-mirror-darwin-amd64` or `./saint-michaels-mirror-darwin-arm64`
           - Windows: `saint-michaels-mirror-windows-amd64.exe`
        
        ## Configuration
        
        See `.env.example` for configuration options. Key variables:
        - `RELAY_NAME`: Display name of your relay
        - `PUBLISH_REMOTES`: Comma-separated list of relays to forward published events to
        - `QUERY_REMOTES`: Comma-separated list of relays to query events from
        
        ## Verification
        
        Verify the integrity of files using the provided checksums:
        ```bash
        sha256sum -c checksums.txt
        ```
        
        ## Support
        
        - **Documentation**: https://github.com/girino/saint-michaels-mirror
        - **Issues**: https://github.com/girino/saint-michaels-mirror/issues
        - **License**: Girino's Anarchist License (GAL) - https://license.girino.org/
        EOF
        
        # Create tar.gz archive (for Linux/macOS users)
        tar -czf saint-michaels-mirror-${{ github.ref_name }}-complete.tar.gz saint-michaels-mirror-${{ github.ref_name }}/
        
        # Create zip archive (for Windows users)
        zip -r saint-michaels-mirror-${{ github.ref_name }}-complete.zip saint-michaels-mirror-${{ github.ref_name }}/
        
        ls -la

    - name: Upload Complete Archives
      run: |
        # Upload tar.gz archive (for Linux/macOS users)
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/gzip" \
          --data-binary @./dist/saint-michaels-mirror-${{ github.ref_name }}-complete.tar.gz \
          "${{ steps.create_release.outputs.upload_url }}?name=saint-michaels-mirror-${{ github.ref_name }}-complete.tar.gz"
        
        # Upload zip archive (for Windows users)
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/zip" \
          --data-binary @./dist/saint-michaels-mirror-${{ github.ref_name }}-complete.zip \
          "${{ steps.create_release.outputs.upload_url }}?name=saint-michaels-mirror-${{ github.ref_name }}-complete.zip"

    - name: Upload Individual Binaries
      run: |
        cd dist
        for file in *; do
          if [ "$file" != "checksums.txt" ]; then
            echo "Uploading $file"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$file"
          fi
        done
        
        echo "Uploading checksums.txt"
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: text/plain" \
          --data-binary @checksums.txt \
          "${{ steps.create_release.outputs.upload_url }}?name=checksums.txt"