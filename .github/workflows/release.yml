name: Create Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/saint-michaels-mirror

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
        go-version: '1.21'

    - name: Build binaries
        run: |
        mkdir -p dist
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o dist/saint-michaels-mirror-linux-amd64 ./cmd/saint-michaels-mirror
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o dist/saint-michaels-mirror-linux-arm64 ./cmd/saint-michaels-mirror
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o dist/saint-michaels-mirror-darwin-amd64 ./cmd/saint-michaels-mirror
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o dist/saint-michaels-mirror-darwin-arm64 ./cmd/saint-michaels-mirror
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o dist/saint-michaels-mirror-windows-amd64.exe ./cmd/saint-michaels-mirror
        GOOS=windows GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o dist/saint-michaels-mirror-windows-arm64.exe ./cmd/saint-michaels-mirror

    - name: Generate checksums
        run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Generate Changelog
      id: changelog
        run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # If no previous tag, get all commits since the beginning
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" | head -20)
        else
          # Get commits since the previous tag
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      run: |
        # Generate release body from template with variable substitutions
        sed -e "s/{{VERSION}}/${{ github.ref_name }}/g" \
            -e "s/{{REGISTRY}}/ghcr.io\/girino\/saint-michaels-mirror/g" \
            -e "s/{{IMAGE_NAME}}/saint-michaels-mirror/g" \
            -e "s/{{CHANGELOG}}/${{ steps.changelog.outputs.changelog }}/g" \
            .github/workflows/release-body-template.md > release_body.md
        
        # Create release using GitHub CLI
        gh release create "${{ github.ref_name }}" \
          --title "Espelho de São Miguel ${{ github.ref_name }}" \
          --notes-file release_body.md \
          --prerelease \
          --generate-notes=false

    - name: Create Binary Archive
      run: |
        cd dist
        
        # Create a complete release directory with binaries and assets
        mkdir -p saint-michaels-mirror-${{ github.ref_name }}
        
        # Copy binaries
        cp *.exe saint-michaels-mirror-${{ github.ref_name }}/ 2>/dev/null || true
        cp saint-michaels-mirror-* saint-michaels-mirror-${{ github.ref_name }}/ 2>/dev/null || true
        cp checksums.txt saint-michaels-mirror-${{ github.ref_name }}/ 2>/dev/null || true
        
        # Copy static and template folders
        cp -r ../cmd/saint-michaels-mirror/static saint-michaels-mirror-${{ github.ref_name }}/
        cp -r ../cmd/saint-michaels-mirror/templates saint-michaels-mirror-${{ github.ref_name }}/
        
        # Copy example.env as a template
        cp ../example.env saint-michaels-mirror-${{ github.ref_name }}/
        
        # Copy docker-compose files for easy deployment
        cp ../docker-compose.prod.yml saint-michaels-mirror-${{ github.ref_name }}/
        cp ../Dockerfile saint-michaels-mirror-${{ github.ref_name }}/ 2>/dev/null || true
        cp ../nginx.conf.example saint-michaels-mirror-${{ github.ref_name }}/ 2>/dev/null || true
        cp ../DEPLOYMENT.md saint-michaels-mirror-${{ github.ref_name }}/ 2>/dev/null || true
        
        # Create README for the release
        cat > saint-michaels-mirror-${{ github.ref_name }}/README.md << 'EOF'
        # Espelho de São Miguel ${{ github.ref_name }}
        
        This archive contains the Espelho de São Miguel Nostr relay aggregator binaries and assets.
        
        ## Contents
        
        - **Binaries**: Platform-specific executable files
        - **static/**: Web interface assets (CSS, JavaScript, images)
        - **templates/**: HTML templates for the web interface
        - **.env.example**: Example configuration file
        - **docker-compose.prod.yml**: Production Docker Compose configuration
        - **Dockerfile**: Docker image build file
        - **nginx.conf.example**: Example nginx configuration for production
        - **DEPLOYMENT.md**: Comprehensive deployment guide
        - **checksums.txt**: SHA256 checksums for verification
        
        ## Quick Start
        
        ### Option 1: Docker Compose (Recommended)
        1. Extract this archive
        2. Copy `.env.example` to `.env` and configure your settings
        3. Run with Docker Compose:
           ```bash
           docker compose -f docker-compose.prod.yml up -d
           ```
        
        ### Option 2: Standalone Binary
        1. Extract this archive
        2. Copy `.env.example` to `.env` and configure your settings
        3. Run the appropriate binary for your platform:
           - Linux: `./saint-michaels-mirror-linux-amd64`
           - macOS: `./saint-michaels-mirror-darwin-amd64` or `./saint-michaels-mirror-darwin-arm64`
           - Windows: `saint-michaels-mirror-windows-amd64.exe`
        
        ### Option 3: Production with Nginx
        1. Extract this archive
        2. Copy `.env.example` to `.env` and configure your settings
        3. Deploy with Docker Compose or standalone binary (see above)
        4. Configure nginx using `nginx.conf.example`
        5. Set up SSL with certbot
        6. See `DEPLOYMENT.md` for complete production setup guide
        
        ## Configuration
        
        See `.env.example` for configuration options. Key variables:
        - `RELAY_NAME`: Display name of your relay
        - `PUBLISH_REMOTES`: Comma-separated list of relays to forward published events to
        - `QUERY_REMOTES`: Comma-separated list of relays to query events from
        - `ADDR`: Address to listen on (default: :3337)
        - `VERBOSE`: Enable verbose logging (1 to enable)
        - `PROD_IMAGE`: Docker image to use (defaults to latest if not set)
        
        ## Verification
        
        After starting the relay, you can verify it's working:
        
        ```bash
        # Check NIP-11 relay information
        curl http://localhost:3337/
        
        # Check health status
        curl http://localhost:3337/api/v1/health
        
        # Check statistics
        curl http://localhost:3337/api/v1/stats
        ```
        
        ## Support
        
        - **Documentation**: https://github.com/girino/saint-michaels-mirror
        - **Issues**: https://github.com/girino/saint-michaels-mirror/issues
        - **License**: Girino's Anarchist License (GAL) - https://license.girino.org/
        EOF
        
        # Create tar.gz archive (for Linux/macOS users)
        tar -czf saint-michaels-mirror-${{ github.ref_name }}-complete.tar.gz saint-michaels-mirror-${{ github.ref_name }}/
        
        # Create zip archive (for Windows users)
        zip -r saint-michaels-mirror-${{ github.ref_name }}-complete.zip saint-michaels-mirror-${{ github.ref_name }}/
        
        ls -la

    - name: Upload Complete Archives
      run: |
        # Upload tar.gz archive (for Linux/macOS users)
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/gzip" \
          --data-binary @./dist/saint-michaels-mirror-${{ github.ref_name }}-complete.tar.gz \
          "${{ steps.create_release.outputs.upload_url }}?name=saint-michaels-mirror-${{ github.ref_name }}-complete.tar.gz"
        
        # Upload zip archive (for Windows users)
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/zip" \
          --data-binary @./dist/saint-michaels-mirror-${{ github.ref_name }}-complete.zip \
          "${{ steps.create_release.outputs.upload_url }}?name=saint-michaels-mirror-${{ github.ref_name }}-complete.zip"

    - name: Upload Individual Binaries
        run: |
        cd dist
        for file in *; do
          if [ "$file" != "checksums.txt" ]; then
            echo "Uploading $file"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$file"
            fi
          done

    - name: Upload Checksums
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: text/plain" \
          --data-binary @./dist/checksums.txt \
          "${{ steps.create_release.outputs.upload_url }}?name=checksums.txt"