# Copyright (c) 2025 Girino Vey.
#
# This software is licensed under Girino's Anarchist License (GAL).
# See LICENSE file for full license text.
# License available at: https://license.girino.org/
#
# Example nginx configuration for Espelho de SÃ£o Miguel Nostr relay
# This configuration handles WebSocket connections and HTTP requests

# Upstream backend for the relay
upstream relay_backend {
    server 127.0.0.1:3337;
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=relay_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=5r/s;

# Main server block
server {
    listen 80;
    server_name your-relay-domain.com;  # Replace with your domain
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Hide nginx version
    server_tokens off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/nostr+json;
    
    # Client settings
    client_max_body_size 1M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # WebSocket connection settings
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # WebSocket timeout settings
    proxy_read_timeout 86400s;
    proxy_send_timeout 86400s;
    proxy_connect_timeout 60s;
    
    # Main relay endpoint - handles WebSocket connections
    location / {
        # Rate limiting
        limit_req zone=relay_limit burst=20 nodelay;
        
        # Proxy to relay backend
        proxy_pass http://relay_backend;
        
        # WebSocket specific headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Cache control for static assets
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_pass http://relay_backend;
        }
    }
    
    # API endpoints with stricter rate limiting
    location /api/ {
        limit_req zone=api_limit burst=10 nodelay;
        proxy_pass http://relay_backend;
    }
    
    # NIP-11 endpoint - relay information
    location /.well-known/nostr.json {
        limit_req zone=api_limit burst=10 nodelay;
        proxy_pass http://relay_backend;
        
        # Cache for 1 hour
        expires 1h;
        add_header Cache-Control "public";
    }
    
    # Health check endpoint (if using external monitoring)
    location /health {
        access_log off;
        proxy_pass http://relay_backend;
    }
    
    # Stats endpoint (if using external monitoring)
    location /stats {
        access_log off;
        proxy_pass http://relay_backend;
    }
    
    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|log|conf)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Favicon handling
    location = /favicon.ico {
        proxy_pass http://relay_backend;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # Robots.txt
    location = /robots.txt {
        proxy_pass http://relay_backend;
        expires 1d;
        add_header Cache-Control "public";
    }
}

# Optional: Redirect www to non-www
server {
    listen 80;
    server_name www.your-relay-domain.com;  # Replace with your domain
    return 301 http://your-relay-domain.com$request_uri;
}

# Example for HTTPS (after SSL certificate is installed)
# Uncomment and modify after running certbot
#
# server {
#     listen 443 ssl http2;
#     server_name your-relay-domain.com;
#     
#     # SSL configuration (managed by certbot)
#     ssl_certificate /etc/letsencrypt/live/your-relay-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/your-relay-domain.com/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf;
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
#     
#     # Same location blocks as above
#     # ... (copy all location blocks from the HTTP server block)
# }
#
# # Redirect HTTP to HTTPS
# server {
#     listen 80;
#     server_name your-relay-domain.com;
#     return 301 https://$server_name$request_uri;
# }
